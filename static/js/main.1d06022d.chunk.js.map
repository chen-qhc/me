{"version":3,"sources":["views/Home.js","views/About.js","views/NotFound.js","App.js","components/Header.js","theme.js","serviceWorker.js","index.js"],"names":["home","Container","maxWidth","Box","my","Typography","variant","component","Button","color","about","PageNotFound","className","to","App","exact","path","Home","About","NotFound","status","useStyles","makeStyles","theme","avatar","display","toolbarLink","padding","spacing","flexShrink","Header","props","classes","sections","Fragment","Toolbar","Avatar","alt","src","map","section","Link","key","title","href","url","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","ThemeProvider","CssBaseline","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6PAqBeA,EAfF,WACX,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,+BAGA,kBAACC,EAAA,EAAD,CAAQF,QAAQ,WAAWG,MAAM,WAAjC,WCHOC,EARD,WACZ,OACE,6BACE,iECKSC,EAPM,kBACnB,yBAAKC,UAAU,aACb,+CACA,wCAAa,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAAb,OCeWC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIT,UAAWU,IACjC,kBAAC,IAAD,CAAOD,KAAK,SAAST,UAAWW,IAChC,kBAAC,IAAD,CAAOX,UAAWY,EAAUC,OAAQ,U,gCCPxCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,QAAS,QAEXC,YAAa,CACXC,QAASJ,EAAMK,QAAQ,GACvBC,WAAY,OA2BDC,MAvBf,SAAgBC,GACd,IAAMC,EAAUX,IACTY,EAAYF,EAAZE,SAEP,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAS5B,UAAU,MAAMD,QAAQ,SAC/B,kBAAC8B,EAAA,EAAD,CAAQC,IAAI,UAAUC,IAAI,eACzBL,EAASM,KAAI,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAAQG,MACbrC,QAAQ,QACRsC,KAAMJ,EAAQK,IACdjC,UAAWoB,EAAQN,aAElBc,EAAQG,a,gBCZNpB,EAjBDuB,YAAe,CAC3BC,QAAQ,CACNC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,U,gBCHKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCHNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAQ9B,SAPG,CACb,CAACU,MAAO,OAAQE,IAAK,KACrB,CAACF,MAAO,QAASE,IAAK,cAOtBmB,SAASC,eAAe,WAG1BJ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACG,EAAA,EAAD,CAAe3C,MAAOA,GACpB,kBAAC4C,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJH,SAASC,eAAe,SDsGpB,kBAAmBG,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.1d06022d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst home = () => {\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Box my={4}>\r\n        <Typography variant=\"h4\" component=\"h1\">\r\n          homepage under construction\r\n        </Typography>\r\n        <Button variant=\"outlined\" color=\"primary\">\r\n          Okay\r\n        </Button>\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default home;\r\n","import React from 'react';\r\n\r\nconst about = () => {\r\n  return (\r\n    <div>\r\n      <h4> about-page under construction </h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default about;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageNotFound = () => (\r\n  <div className=\"not-found\">\r\n    <h1>Page Not Found.</h1>\r\n    <p>Return to <Link to=\"/\">index</Link>.</p>\r\n  </div>\r\n);\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport Home from './views/Home';\r\nimport About from './views/About';\r\nimport NotFound from './views/NotFound';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route component={NotFound} status={404} />\r\n        </Switch>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Link from '@material-ui/core/Link';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    display: 'flex',\r\n  },\r\n  toolbarLink: {\r\n    padding: theme.spacing(2),\r\n    flexShrink: 0,\r\n  }\r\n}));\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles();\r\n  const {sections} = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Toolbar component=\"nav\" variant=\"dense\">\r\n        <Avatar alt=\"Natalie\" src=\"avatar.jpg\" />\r\n        {sections.map((section) => (\r\n          <Link\r\n            key={section.title}\r\n            variant=\"body2\"\r\n            href={section.url}\r\n            className={classes.toolbarLink}\r\n          >\r\n            {section.title}\r\n          </Link>\r\n        ))}\r\n      </Toolbar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette:{\r\n    primary: {\r\n      main: '#556cd6',\r\n    },\r\n    secondary: {\r\n      main: '#19857b',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: 'fff',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Header from './components/Header'\r\nimport theme from './theme';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst sections=[\r\n  {title: 'Home', url: '/'},\r\n  {title: 'About', url: '/about'}\r\n]\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Header sections={sections} />\r\n  </React.StrictMode>,\r\n  document.getElementById('header')\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}